---
import AnimatedTitle from './AnimatedTitle';
import AnimatedSubtitle from './AnimatedSubtitle';
import AnimatedCTAs from './AnimatedCTAs';


interface HeroProps {
  heroType?: string[];
  heroTitle: string;
  heroSubtitle?: string;
  heroBackgroundColor?: string;
  heroBackgroundImage?: {
    node: { sourceUrl: string; altText?: string };
  } | null;
  heroImage?: {
    node: { sourceUrl: string; altText?: string };
  } | null;
  heroTextTheme?: string[];
  heroAnimationStyle?: string[];
  heroPrimaryCta?: {
    url: string;
    title: string;
    target?: string;
    icon?: string;
  };
  heroPrimaryCtaIcon?: string;
  heroSecondaryCta?: {
    url: string;
    title: string;
    target?: string;
    icon?:string;
  };
  heroSecondaryCtaIcon?: string;
}

const {
  heroType = [],
  heroTitle,
  heroSubtitle,
  heroBackgroundColor,
  heroBackgroundImage = null,
  heroImage = null,
  heroTextTheme = ['auto'],
  heroAnimationStyle = ['default'],
  heroPrimaryCta,
  heroPrimaryCtaIcon,
  heroSecondaryCta,
  heroSecondaryCtaIcon
} = Astro.props as HeroProps;




const unwrap = (val: string[] | undefined, fallback = ''): string =>
  Array.isArray(val) ? val[0] ?? fallback : fallback;

const type = unwrap(heroType, 'high');
const textTheme = unwrap(heroTextTheme, 'auto');

const bgType = heroBackgroundImage
  ? 'image'
  : heroBackgroundColor
  ? 'color'
  : 'gradient';

const layoutClass =
  type === 'high' ? 'py-36 lg:py-48' : type === 'medium' ? 'py-24' : 'py-12';
const bgClass = bgType === 'gradient' ? 'gradient-background' : '';
const textColorClass =
  textTheme === 'dark'
    ? 'text-slate-900'
    : textTheme === 'light'
    ? 'text-white'
    : 'text-inherit';
---
<section class={`hero relative overflow-hidden ${layoutClass} px-6 flex flex-col justify-center ${bgClass} ${textColorClass}`}>
  {heroImage?.node?.sourceUrl && (
    <>
      <div
        class="absolute inset-0 -z-10 bg-cover bg-center bg-no-repeat bg-fixed"
        style={`background-image: url('${heroImage.node.sourceUrl}');`}
      />
      <div class="absolute inset-0 -z-10 bg-black/40" />
    </>
  )}

  <div class={`max-w-2xl w-full flex flex-col gap-8 mx-auto`}>
    <div class="relative inline-block group w-fit text-center" id="hero-area">
      <AnimatedTitle client:load title={heroTitle} />
    </div>
<div class="text-center">
    {heroSubtitle && (
      <AnimatedSubtitle client:load text={heroSubtitle} />
    )}
</div>

<AnimatedCTAs 
client:load 
primaryCta={
  heroPrimaryCta && {
    label: heroPrimaryCta.title,
    url: heroPrimaryCta.url,
    target: heroPrimaryCta.target || '_self',
    icon: heroPrimaryCtaIcon || null
  }
}
secondaryCta={
  heroSecondaryCta && {
    label: heroSecondaryCta.title,
    url: heroSecondaryCta.url,
    target: heroSecondaryCta.target || '_self',
    icon: heroSecondaryCtaIcon || null
  }
}
alignment="center" 
/>

  </div>
</section>

<script type="module">
  const overlayTitle = document.getElementById('gradient-overlay-title');
  const overlaySubtitle = document.getElementById('gradient-overlay-subtitle');
  const heading = document.getElementById('hero-heading');
  const strapline = document.getElementById('hero-strapline');

  const maskSize = 480;
  const radius = maskSize / 2;

  document.addEventListener('mousemove', (e) => {
    if (overlayTitle && heading) {
      const rect = heading.getBoundingClientRect();
      const x = e.clientX - rect.left - radius;
      const y = e.clientY - rect.top - radius;
      overlayTitle.style.maskPosition = `${x}px ${y}px`;
      overlayTitle.style.webkitMaskPosition = `${x}px ${y}px`;
    }

    if (overlaySubtitle && strapline) {
      const rect = strapline.getBoundingClientRect();
      const x = e.clientX - rect.left - radius;
      const y = e.clientY - rect.top - radius;
      overlaySubtitle.style.maskPosition = `${x}px ${y}px`;
      overlaySubtitle.style.webkitMaskPosition = `${x}px ${y}px`;
    }
  });

  document.addEventListener('mouseleave', () => {
    if (overlayTitle) {
      overlayTitle.style.maskPosition = `-9999px -9999px`;
      overlayTitle.style.webkitMaskPosition = `-9999px -9999px`;
    }
    if (overlaySubtitle) {
      overlaySubtitle.style.maskPosition = `-9999px -9999px`;
      overlaySubtitle.style.webkitMaskPosition = `-9999px -9999px`;
    }
  });
</script>
