---
import type { ParsedStackItem } from '@/types/imagestack';
import Hero from '@/components/hero/index.astro';
import ImageStack from '@/components/imagestack/index.tsx';
import { TextColumns } from '@/components/textcolumns';
import type { TextColumn } from '@/components/textcolumns';
import FeatureColumns from '@/components/featurecolumns';
import CalloutBlock from '@/components/calloutblock';
import CardDeck from '@/components/carddeck';
import FormBlock from '@/components/forms';
import Headline from '@/components/headline/index.astro';
import Accordion from '@/components/accordion';
import Carousel from '@/components/carousel';
import { Buffer } from 'buffer';

import type {
  ContentFieldsFragment,
  ContentFieldsPageBuilderContentHeroLayoutFragment,
  ContentFieldsPageBuilderContentImageStackLayoutFragment,
  ContentFieldsPageBuilderContentTextLayoutFragment,
  ContentFieldsPageBuilderContentFeatureColumnsLayoutFragment,
  ContentFieldsPageBuilderContentCalloutBlockLayoutFragment,
  ContentFieldsPageBuilderContentCardDeckLayoutFragment,
  ContentFieldsPageBuilderContentHeadlineLayoutFragment,
  ContentFieldsPageBuilderContentAccordionLayoutFragment,
  ContentFieldsPageBuilderContentContactFormLayoutFragment,
  ContentFieldsPageBuilderContentCarouselLayoutFragment,
} from '@/queries/GetPage.generated';

function decodeGraphqlId(id: string): number | null {
  try {
    const decoded = Buffer.from(id, 'base64').toString('utf-8');
    const parts = decoded.split(':');
    const numericId = parseInt(parts[1], 10);
    return isNaN(numericId) ? null : numericId;
  } catch {
    return null;
  }
}

function safe<T>(val: T | null | undefined, fallback: T): T {
  return val ?? fallback;
}

function first<T>(arr: (T | null)[] | null | undefined, fallback: T): T {
  return arr?.[0] ?? fallback;
}

type PageBuilderBlock = ContentFieldsFragment & { __typename: string };

const { contentBlocks } = Astro.props as {
  contentBlocks: (PageBuilderBlock | null)[];
};

function isPageBuilderBlock(block: unknown): block is PageBuilderBlock {
  if (!block || typeof block !== 'object') return false;
  const typed = block as { __typename?: string };
  return [
    'PageBuilderContentHeroLayout',
    'PageBuilderContentImageStackLayout',
    'PageBuilderContentTextLayout',
    'PageBuilderContentFeatureColumnsLayout',
    'PageBuilderContentCalloutBlockLayout',
    'PageBuilderContentCardDeckLayout',
    'PageBuilderContentHeadlineLayout',
    'PageBuilderContentAccordionLayout',
    'PageBuilderContentContactFormLayout',
    'PageBuilderContentCarouselLayout',
  ].includes(typed.__typename!);
}

function parseStackItem(
  item: NonNullable<ContentFieldsPageBuilderContentImageStackLayoutFragment['imageStack']>[number],
  index: number
): ParsedStackItem {
  return {
    id: `image-${index}`,
    src: item?.stackImage?.node?.sourceUrl ?? '',
    alt: item?.stackImage?.node?.altText ?? '',
    label: item?.stackLabel ?? '',
  };
}

const blocks: PageBuilderBlock[] = contentBlocks.filter(isPageBuilderBlock);
---

{blocks.map((block, i) => {
  try {
    switch (block.__typename) {
      case 'PageBuilderContentHeroLayout':
        return <Hero {...(block as ContentFieldsPageBuilderContentHeroLayoutFragment)} />;

      case 'PageBuilderContentImageStackLayout': {
        const items = block.imageStack?.filter(Boolean).map(parseStackItem) ?? [];
        return (
          <section class="py-24">
            <ImageStack items={items} client:load />
          </section>
        );
      }

      case 'PageBuilderContentHeadlineLayout': {
        const hb = block as ContentFieldsPageBuilderContentHeadlineLayoutFragment;
        return (
          <Headline
            headlineText={safe(hb.headlineText, '')}
            headlineSize={[first(hb.headlineSize, 'large')]}
            containerWidth={first(hb.containerWidth, 'w-full')}
          />
        );
      }

      case 'PageBuilderContentCarouselLayout': {
        const cb = block as ContentFieldsPageBuilderContentCarouselLayoutFragment;
        return <Carousel data={cb} client:load />;
      }

      case 'PageBuilderContentAccordionLayout': {
        const ab = block as ContentFieldsPageBuilderContentAccordionLayoutFragment;
        return (
          <Accordion
            items={
              (ab.accordion ?? [])
                .filter((it): it is NonNullable<typeof it> => Boolean(it?.accordionHeadline && it.accordionContent))
                .map(it => ({
                  accordionHeadline: it.accordionHeadline!,
                  accordionContent: it.accordionContent!,
                }))
            }
            client:load
          />
        );
      }

      case 'PageBuilderContentTextLayout': {
        const tb = block as ContentFieldsPageBuilderContentTextLayoutFragment;
        console.log('Text block data:', JSON.stringify(tb, null, 2));

        return (
          <TextColumns
            columnContent={(tb.columnContent ?? []).map(item => {
              // base shape
              const columnData: TextColumn = {
                columnWidth: Array.isArray(item?.columnWidth) 
                  ? item.columnWidth.filter((w): w is string => typeof w === 'string')
                  : ['col-span-12'],
                columnContent: item?.columnContent ?? '',
              };

              // optional button
              if (item?.columnButton) {
                columnData.columnButton = {
                  buttonLink: {
                    title: item.columnButton.buttonLink?.title ?? '',
                    url: item.columnButton.buttonLink?.url ?? '',
                    target: item.columnButton.buttonLink?.target ?? '_self',
                  },
                  buttonIcon: first(item.columnButton.buttonIcon, ''),
                  buttonStyle: first(item.columnButton.buttonStyle, 'default') as
                    | 'primary'
                    | 'secondary'
                    | 'default',
                };
              }

// Update the form node mapping to ensure title is never null
if (item?.columnLinkedForm?.nodes) {
  const formNodes = item.columnLinkedForm.nodes
    .filter((n): n is Extract<typeof n, { __typename: 'CustomForm' }> => 
      n?.__typename === 'CustomForm' && 
      !!n.id && 
      n.title !== undefined &&  // Changed from !!n.title to check for undefined
      !!n.formFields?.formFields
    )
    .map(n => {
      const formFields = (n.formFields?.formFields ?? [])
        .filter((f): f is NonNullable<typeof f> => 
          Boolean(f?.formFieldName && f.formFieldLabel)
        )
        .map(f => ({
          formFieldName: f.formFieldName!,
          formFieldLabel: f.formFieldLabel!,
          formFieldType: Array.isArray(f.formFieldType)
            ? f.formFieldType[0] ?? 'text'
            : f.formFieldType ?? 'text',
          formFieldsRequired: f.formFieldsRequired ?? false,
          formFieldsPlaceholder: f.formFieldsPlaceholder ?? undefined, // Make optional if empty
          formFieldsOptions: Array.isArray(f.formFieldsOptions)
            ? f.formFieldsOptions.filter((opt): opt is string => typeof opt === 'string')
            : f.formFieldsOptions
              ? [f.formFieldsOptions].filter((s): s is string => typeof s === 'string')
              : undefined, // Make optional if empty
          formFieldsDefault: f.formFieldsDefault ?? undefined // Make optional if empty
        }));

      return {
        __typename: n.__typename,
        id: n.id,
        title: n.title ?? '', // Ensure title is never null
        formFields: {
          formFields: formFields
        }
      };
    });

  if (formNodes.length) {
    columnData.columnLinkedForm = { nodes: formNodes };
  }
}

              return columnData;
            })}
            containerWidth={first(tb.containerWidth, 'container-lg')}
          />
        );
      }

      case 'PageBuilderContentFeatureColumnsLayout': {
        const fb = block as ContentFieldsPageBuilderContentFeatureColumnsLayoutFragment;
        return (
          <FeatureColumns
            featureColumnsColumns={(fb.featureColumnsColumns ?? []).map(col => {
              if (!col) return null;
              return {
                columnText: col.columnText ?? '',
                columnImages: (col.columnImages ?? [])
                  .filter((img): img is NonNullable<typeof img> => Boolean(img?.columnImagesStack?.node?.sourceUrl))
                  .map(img => ({
                    sourceUrl: img.columnImagesStack!.node!.sourceUrl!,
                    ...(img.columnImagesStack!.node!.altText && { altText: img.columnImagesStack!.node!.altText! }),
                  })),
                ...(col.featureLink?.title && col.featureLink.url
                  ? {
                      featureLink: {
                        title: col.featureLink.title,
                        url: col.featureLink.url,
                        ...(col.featureLink.target && { target: col.featureLink.target }),
                      },
                    }
                  : {}),
              };
            })}
            containerWidth="container-lg"
          />
        );
      }

      case 'PageBuilderContentCalloutBlockLayout': {
        const cb = block as ContentFieldsPageBuilderContentCalloutBlockLayoutFragment;
        return (
          <CalloutBlock
            calloutItem={(cb.calloutItem ?? [])
              .filter((it): it is NonNullable<typeof it> => Boolean(it))
              .map(it => ({
                calloutIcon: first(it.calloutIcon, ''),
                calloutHeadline: it.calloutHeadline ?? '',
                calloutDescription: it.calloutDescription ?? '',
              }))}
          />
        );
      }

      case 'PageBuilderContentCardDeckLayout': {
        const cd = block as ContentFieldsPageBuilderContentCardDeckLayoutFragment;
        return (
          <CardDeck
            cardDeckItem={(cd.cardDeckItem ?? [])
              .filter((c): c is NonNullable<typeof c> => Boolean(c))
              .map(c => ({
                cardDeckIcon: first(c.cardDeckIcon, ''),
                cardDeckHeadline: c.cardDeckHeadline ?? '',
                cardDeckDescription: c.cardDeckDescription ?? '',
              }))}
            client:load
          />
        );
      }

      case 'PageBuilderContentContactFormLayout': {
        const cf = block as ContentFieldsPageBuilderContentContactFormLayoutFragment;
        const formNode = cf.linkedForm?.node;

        if (!formNode || formNode.__typename !== 'CustomForm' || !formNode.id) {
          return <div class="text-red-600 text-sm">No Contact Form selected.</div>;
        }
        const numId = decodeGraphqlId(formNode.id);

        return (
          <FormBlock
            form={{
              id: String(numId),
              title: formNode.title ?? '',
              fields: (formNode.formFields?.formFields ?? [])
  .filter((f): f is NonNullable<typeof f> => 
    Boolean(f?.formFieldName && f.formFieldLabel)
  )
  .map(f => ({
    formFieldName: f.formFieldName!,
    formFieldLabel: f.formFieldLabel!,
    formFieldType: Array.isArray(f.formFieldType)
      ? f.formFieldType[0] ?? 'text'
      : f.formFieldType ?? 'text',
    formFieldsRequired: f.formFieldsRequired ?? false,
    formFieldsPlaceholder: f.formFieldsPlaceholder ?? '',
    formFieldsOptions: Array.isArray(f.formFieldsOptions)
      ? f.formFieldsOptions.filter((opt): opt is string => typeof opt === 'string')
      : f.formFieldsOptions
        ? [f.formFieldsOptions].filter((s): s is string => typeof s === 'string')
        : [],
    formFieldsDefault: f.formFieldsDefault ?? ''
  }))
            }}
            intro={cf.formIntro ?? undefined}
            client:load
          />
        );
      }

      default:
        return null;
    }
  } catch {
    return null;
  }
})}
