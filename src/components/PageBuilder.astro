---
import type { ParsedStackItem } from '@/types/imagestack';
import Hero from '@/components/hero/index.astro';
import ImageStack from '@/components/imagestack/index.tsx';
import { TextColumns } from '@/components/textcolumns';
import FeatureColumns from '@/components/featurecolumns';
import CalloutBlock from '@/components/calloutblock';
import CardDeck from '@/components/carddeck';
import FormBlock from '@/components/forms';
import Headline from '@/components/headline/index.astro';
import Accordion from '@/components/accordion';
import Carousel from '@/components/carousel';
import { Buffer } from 'buffer';

import type {
  ContentFieldsFragment,
  ContentFieldsPageBuilderContentHeroLayoutFragment,
  ContentFieldsPageBuilderContentImageStackLayoutFragment,
  ContentFieldsPageBuilderContentTextLayoutFragment,
  ContentFieldsPageBuilderContentFeatureColumnsLayoutFragment,
  ContentFieldsPageBuilderContentCalloutBlockLayoutFragment,
  ContentFieldsPageBuilderContentCardDeckLayoutFragment,
  ContentFieldsPageBuilderContentHeadlineLayoutFragment,
  ContentFieldsPageBuilderContentAccordionLayoutFragment,
  ContentFieldsPageBuilderContentContactFormLayoutFragment,
  ContentFieldsPageBuilderContentCarouselLayoutFragment,
} from '@/queries/GetPage.generated';

function decodeGraphqlId(id: string): number | null {
  try {
    const decoded = Buffer.from(id, 'base64').toString('utf-8');
    const parts = decoded.split(':');
    const numericId = parseInt(parts[1], 10);
    return isNaN(numericId) ? null : numericId;
  } catch {
    return null;
  }
}

function safe<T>(val: T | null | undefined, fallback: T): T {
  return val ?? fallback;
}

function first<T>(arr: (T | null)[] | null | undefined, fallback: T): T {
  return arr?.[0] ?? fallback;
}

type PageBuilderBlock = ContentFieldsFragment & { __typename: string };

const { contentBlocks } = Astro.props as {
  contentBlocks: (PageBuilderBlock | null)[];
};

function isPageBuilderBlock(block: unknown): block is PageBuilderBlock {
  if (!block || typeof block !== 'object') return false;
  const typedBlock = block as { __typename?: unknown };
  return [
    'PageBuilderContentHeroLayout',
    'PageBuilderContentImageStackLayout',
    'PageBuilderContentTextLayout',
    'PageBuilderContentFeatureColumnsLayout',
    'PageBuilderContentCalloutBlockLayout',
    'PageBuilderContentCardDeckLayout',
    'PageBuilderContentHeadlineLayout',
    'PageBuilderContentAccordionLayout',
    'PageBuilderContentContactFormLayout',
    'PageBuilderContentCarouselLayout',
  ].includes(typedBlock.__typename as string);
}

function parseStackItem(
  item: NonNullable<ContentFieldsPageBuilderContentImageStackLayoutFragment['imageStack']>[number],
  index: number,
  hideOn: 'all' | 'mobile' | 'desktop' = 'all'
): ParsedStackItem {
  return {
    id: `image-${index}`,
    src: item?.stackImage?.node?.sourceUrl ?? '',
    alt: item?.stackImage?.node?.altText ?? '',
    label: item?.stackLabel ?? '',
    hideOn: hideOn
  };
}

const blocks: PageBuilderBlock[] = contentBlocks.filter(isPageBuilderBlock);
---

{blocks.map((block, index) => {
  try {
    switch (block.__typename) {
      case 'PageBuilderContentHeroLayout':
        return <Hero {...(block as ContentFieldsPageBuilderContentHeroLayoutFragment)} />;

        case 'PageBuilderContentImageStackLayout': {
  // WP-GraphQL gives us an array for the hide flag
  const hideOn = Array.isArray(block.imageStackHideOn) && block.imageStackHideOn.length > 0
    ? (block.imageStackHideOn[0] as 'all' | 'mobile' | 'desktop')
    : 'all';

  const items = block.imageStack?.filter(Boolean).map((item, index) =>
    parseStackItem(item, index, hideOn)
  ) ?? [];

  return (
    <ImageStack
      items={items}
      hideOn={hideOn}
      client:load
    />
  );
}

      case 'PageBuilderContentHeadlineLayout': {
        const headlineBlock = block as ContentFieldsPageBuilderContentHeadlineLayoutFragment;
        return (
          <Headline
            headlineText={safe(headlineBlock.headlineText, '')}
            headlineSize={[first(headlineBlock.headlineSize, 'large')]}
            containerWidth={first(headlineBlock.containerWidth, 'w-full')}
          />
        );
      }

      case 'PageBuilderContentCarouselLayout': {
  const carouselBlock = block as ContentFieldsPageBuilderContentCarouselLayoutFragment;
  return <Carousel data={carouselBlock} client:load />;
}

      case 'PageBuilderContentAccordionLayout': {
  const accordionBlock = block as ContentFieldsPageBuilderContentAccordionLayoutFragment;
  return (
    <Accordion
      items={(accordionBlock.accordion ?? [])
        .filter((item): item is NonNullable<typeof item> => Boolean(item?.accordionHeadline && item.accordionContent))
        .map(item => ({
          accordionHeadline: item.accordionHeadline!,
          accordionContent: item.accordionContent!
        }))}
        client:load
    />
  );
}
      case 'PageBuilderContentTextLayout': {
        const textBlock = block as ContentFieldsPageBuilderContentTextLayoutFragment;
        return (
          <TextColumns
            columnContent={(textBlock.columnContent ?? []).map((item) => {
              const button = item?.columnButton ? {
                buttonLink: {
                  title: item.columnButton.buttonLink?.title ?? '',
                  url: item.columnButton.buttonLink?.url ?? '',
                  target: item.columnButton.buttonLink?.target ?? '_self'
                },
                buttonIcon: first(item.columnButton.buttonIcon, ''),
                buttonStyle: first(item.columnButton.buttonStyle, 'default') as 'primary' | 'secondary' | 'default'
              } : undefined;

              return {
                columnWidth: first(item?.columnWidth, 'col-span-6'),
                columnContent: safe(item?.columnContent, ''),
                ...(button ? { columnButton: button } : {})
              };
            })}
            containerWidth={first(textBlock.containerWidth, 'container-lg')}
            containerStyle={first(textBlock.containerStyle, 'plain') as 'plain' | 'blurb'}          />
        );
      }

      case 'PageBuilderContentFeatureColumnsLayout': {
        const featureBlock = block as ContentFieldsPageBuilderContentFeatureColumnsLayoutFragment;
        return (
          <FeatureColumns
            featureColumnsColumns={(featureBlock.featureColumnsColumns ?? []).map(column => {
              if (!column) return null;
              
              return {
                columnText: column.columnText ?? '',
                columnImages: (column.columnImages ?? [])
                  .filter((img): img is NonNullable<typeof img> => Boolean(img?.columnImagesStack?.node?.sourceUrl))
                  .map(img => ({
                    sourceUrl: img.columnImagesStack!.node!.sourceUrl!,
                    ...(img.columnImagesStack!.node!.altText ? { altText: img.columnImagesStack?.node.altText } : {})
                  })),
                ...(column.featureLink?.title && column.featureLink.url ? {
                  featureLink: {
                    title: column.featureLink.title,
                    url: column.featureLink.url,
                    ...(column.featureLink.target ? { target: column.featureLink.target } : {})
                  }
                } : {})
              };
            })}
            containerWidth="container-lg"
                />
        );
      }

      case 'PageBuilderContentCalloutBlockLayout': {
        const calloutBlock = block as ContentFieldsPageBuilderContentCalloutBlockLayoutFragment;
        return (
          <CalloutBlock
            calloutItem={(calloutBlock.calloutItem ?? [])
              .filter((item): item is NonNullable<typeof item> => Boolean(item))
              .map(item => ({
                calloutIcon: first(item.calloutIcon, ''),
                calloutHeadline: item.calloutHeadline ?? '',
                calloutDescription: item.calloutDescription ?? ''
              }))}
          />
        );
      }

      case 'PageBuilderContentCardDeckLayout': {
        const cardBlock = block as ContentFieldsPageBuilderContentCardDeckLayoutFragment;
        return (
          <CardDeck
            cardDeckItem={(cardBlock.cardDeckItem ?? [])
              .filter((card): card is NonNullable<typeof card> => Boolean(card))
              .map(card => ({
                cardDeckIcon: first(card.cardDeckIcon, ''),
                cardDeckHeadline: card.cardDeckHeadline ?? '',
                cardDeckDescription: card.cardDeckDescription ?? ''
              }))}
            client:load
          />
        );
      }

      case 'PageBuilderContentContactFormLayout': {
        const contactFormBlock = block as ContentFieldsPageBuilderContentContactFormLayoutFragment;
        const formNode = contactFormBlock.linkedForm?.node;

        if (!formNode || formNode.__typename !== 'CustomForm' || !formNode.id) {
          return (
            <div class="text-red-600 text-sm">
              No Contact Form selected. Please select a valid form in ACF.
            </div>
          );
        }
        const numericFormId = decodeGraphqlId(formNode.id);

        return (
  <FormBlock
    form={{
      id: String(numericFormId),
      title: formNode.title ?? '',
      fields: (formNode.formFields?.formFields ?? [])
        .filter((field): field is NonNullable<typeof field> => Boolean(field))
        .map(field => ({
          formFieldLabel: field.formFieldLabel ?? '',
          formFieldName: field.formFieldName ?? '',
          formFieldType: Array.isArray(field.formFieldType) ? field.formFieldType[0] ?? 'text' : field.formFieldType ?? 'text',
          formFieldsRequired: field.formFieldsRequired ?? false,
          formFieldsPlaceholder: field.formFieldsPlaceholder ?? '',
          formFieldsOptions: field.formFieldsOptions ? field.formFieldsOptions.split('\n').filter(Boolean) : [],
          formFieldsDefault: field.formFieldsDefault ?? ''
        }))
    }}
    intro={contactFormBlock.formIntro ?? undefined}
    client:load
  />
);
      }

      default:
        return null;
    }
  } catch (error) {
    return null;
  }
})}